import jdk.internal.joptsimple.internal.Strings

// TODO : convert to kotlin for consistency
plugins {
  id("elastic-otel.java-conventions")
  alias catalog.plugins.taskinfo
}

configurations {
  warOnly {
    transitive = false
    canBeResolved = true
    canBeConsumed = false
  }
}

compileTestJava {
  options.release.set(17)
}

dependencies {
  testImplementation(catalog.testcontainers)
  testImplementation(catalog.jackson)
  testImplementation(catalog.protobuf.util)
  testImplementation(catalog.okhttp)
  testImplementation(catalog.opentelemetryProto)
  testImplementation(catalog.awaitility)
  testImplementation("io.opentelemetry:opentelemetry-api")

  testImplementation(catalog.logback)

  testImplementation(catalog.assertj.core)

  testImplementation("io.opentelemetry.semconv:opentelemetry-semconv")

  testImplementation("org.mock-server:mockserver-client-java:5.15.0")

  warOnly(project("test-app-war")){
    attributes {
        attribute(Attribute.of("elastic.packaging", String.class), "war")
      }
  }
}

tasks.test {
  useJUnitPlatform()

  testLogging.showStandardStreams = true

  // ensure test application docker image is available locally with 'latest' tag
  dependsOn(":smoke-tests:test-app:assemble")

  // depends on packaged agent output file
  def agentShadowTask = project(":agent").tasks.shadowJar
  dependsOn(agentShadowTask)
  inputs.files(layout.files(agentShadowTask))

  // depends on the packaged test app war file
  dependsOn(project(":smoke-tests:test-app-war").tasks.assemble)
  def warFile = project.configurations.warOnly.files.stream().findFirst().get()
  inputs.files(layout.files(warFile))

  doFirst {
    jvmArgs(
        "-Dio.opentelemetry.smoketest.agent.shadowJar.path=${agentShadowTask.archiveFile.get()}",
        "-Dio.opentelemetry.smoketest.agent.testAppWar.path=${warFile}")
  }
}
