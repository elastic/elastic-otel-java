#!/usr/bin/env bash
##  This script prepares the Vault context and required tooling
##  for the release and snapshot pipelines.
##
##  NOTE: *_SECRET or *_TOKEN env variables are masked, hence if you'd like to avoid any
##        surprises please use the suffix _SECRET or _TOKEN for those values that contain
##        any sensitive data. Buildkite can mask those values automatically

set -eo pipefail

# Upload should not do much with the pre-command.
if [[ "$BUILDKITE_COMMAND" =~ .*"upload".* ]]; then
  echo "Skipped pre-command when running the Upload pipeline"
  exit 0
fi

if [ "$BUILDKITE_PIPELINE_SLUG" == "elastic-otel-java-snapshot" ]; then
  source .buildkite/hooks/prepare-release.sh
fi

if [ "$BUILDKITE_PIPELINE_SLUG" == "elastic-otel-java-release" ]; then
  source .buildkite/hooks/prepare-release.sh
fi

# Configure the java version
JAVA_VERSION=$(cat .java-version | xargs | tr -dc '[:print:]')
JAVA_HOME="${HOME}/.java/openjdk${JAVA_VERSION}"
export JAVA_HOME
PATH="${JAVA_HOME}/bin:$PATH"
export PATH

# Fallback to install at runtime
if [ ! -d "${JAVA_HOME}" ] ; then
  # This should not be the case normally untless the .java-version file has been changed
  # and the VM Image is not yet available with the latest version.
  echo "--- Install JDK${JAVA_VERSION} :java:"
  JAVA_URL=https://jvm-catalog.elastic.co/jdk
  JAVA_PKG="${JAVA_URL}/latest_openjdk_${JAVA_VERSION}_linux.tar.gz"
  curl -L --output /tmp/jdk.tar.gz "${JAVA_PKG}"
  mkdir -p "${JAVA_HOME}"
  tar --extract --file /tmp/jdk.tar.gz --directory "${JAVA_HOME}" --strip-components 1
fi

# Validate the java version
java -version
