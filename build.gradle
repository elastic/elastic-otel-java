plugins {
  id "idea"
  id "base" // required to get 'clean' task
  alias(catalog.plugins.nexusPublish)
}

group 'co.elastic.otel'

Properties versionProperties = new Properties()
versionProperties.load(new FileInputStream(file('version.properties')))
version = versionProperties.get("version")

description = "Elastic OpenTelemetry java distribution"

defaultTasks("agent:assemble")

subprojects {
  group = rootProject.group
  version = rootProject.version

  apply plugin: "java"
  apply plugin: "maven-publish" //Allows to run ./gradle publishToMavenLocal for easy local testing
  apply plugin: "com.diffplug.spotless"

  ext {
    deps = [
        autoservice: [
            "com.google.auto.service:auto-service:" + catalog.versions.autoservice.get(),
            "com.google.auto.service:auto-service-annotations:" + catalog.versions.autoservice.get(),
        ]
    ]
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      name = "mavenCentralSnapshots"
      url = uri("https://oss.sonatype.org/content/repositories/snapshots")
    }
  }

  spotless {
    java {
      target("src/**/*.java")
      googleJavaFormat()

      licenseHeaderFile(rootProject.file("buildscripts/spotless.license.java"), "(package|import|public)")
          .named("default")

      licenseHeaderFile(rootProject.file("buildscripts/spotless.reallogic.license.java"), "(package|import|public)")
          .named("reallogic")
          .onlyIfContentMatches("package co.elastic.otel.profiler.collections;")

    }
  }

  dependencies {

    implementation(platform(catalog.opentelemetryInstrumentationAlphaBom))

    testImplementation(catalog.mockito)

    testImplementation(enforcedPlatform(catalog.junitBom))
    testImplementation("org.junit.jupiter:junit-jupiter")
  }

  tasks {
    test {
      useJUnitPlatform()
    }

    compileJava {
      options.release.set(8)
    }
    compileTestJava {
      options.release.set(8)
    }
  }

}

nexusPublishing {
  repositories {
    sonatype()
  }
}

task copyGitHooks(type: Copy) {
  from layout.projectDirectory.dir(".githooks")
  into layout.projectDirectory.dir(".git").dir("hooks")
}

task currentVersion {
  doLast {
    println project.version
  }
}

task setVersion {
  doLast {
    def versionFile = file('version.properties')
    versionFile.text = "version=${newVersion}\n"
  }
}

task setNextVersion {
  doLast {
    def versionFile = file('version.properties')
    def pattern = /version=(\d+\.\d+\.\d+)(-SNAPSHOT)?/
    versionFile.text = versionFile.text.replaceFirst(pattern) { match, version, suffix ->
      def (major, minor, patch) = version.split(/\./).collect { it as int }
      "version=${major}.${minor}.${patch + 1}-SNAPSHOT"
    }
  }
}

tasks.configure {
  doLast {
    copyGitHooks
  }
}
