[versions]
shadow = "8.3.6"
jib = "3.4.5"
spotless = "7.0.3"
junit = "5.12.2"
autoservice = "1.1.1"
log4j2 = "2.24.3"

# otel protocol (OTLP)
opentelemetryProto = "1.3.2-alpha"

# otel agent, we rely on the '*-alpha' and get the non-alpha dependencies transitively
# updated from upstream agent with gradle/update-upstream.sh
opentelemetryJavaagentAlpha = "2.15.0-alpha"

# otel contrib
# updated from upstream agent with gradle/update-upstream.sh
opentelemetryContribAlpha = "1.45.0-alpha"

# otel semconv
# updated from upstream agent with gradle/update-upstream.sh
# While the semconv stable/incubating artifacts are provided as transitive dependencies, keeping
# an explicit version here allows to easily override to a not-yet-released version.
opentelemetrySemconv = "1.32.0"
opentelemetrySemconvAlpha = "1.32.0-alpha"

[libraries]

# transitively provides 'opentelemetry-instrumentation-bom' (non-alpha)
opentelemetryInstrumentationAlphaBom = { group = "io.opentelemetry.instrumentation", name = "opentelemetry-instrumentation-bom-alpha", version.ref = "opentelemetryJavaagentAlpha" }

opentelemetryProto = { group = "io.opentelemetry.proto", name = "opentelemetry-proto", version.ref = "opentelemetryProto" }

contribResources = { group = "io.opentelemetry.contrib", name = "opentelemetry-resource-providers", version.ref = "opentelemetryContribAlpha" }
contribSpanStacktrace = { group = "io.opentelemetry.contrib", name = "opentelemetry-span-stacktrace", version.ref = "opentelemetryContribAlpha" }
contribInferredSpans = { group = "io.opentelemetry.contrib", name = "opentelemetry-inferred-spans", version.ref = "opentelemetryContribAlpha" }
contribRuntimeAttach = { group = "io.opentelemetry.contrib", name = "opentelemetry-runtime-attach-core", version.ref = "opentelemetryContribAlpha" }

opentelemetrySemconv = { group = "io.opentelemetry.semconv", name = "opentelemetry-semconv", version.ref = "opentelemetrySemconv" }
opentelemetrySemconvIncubating = { group = "io.opentelemetry.semconv", name = "opentelemetry-semconv-incubating", version.ref = "opentelemetrySemconvAlpha" }

autoservice-processor = { group = "com.google.auto.service", name = "auto-service", version.ref = "autoservice" }
autoservice-annotations = { group = "com.google.auto.service", name = "auto-service-annotations", version.ref = "autoservice" }

assertj-core = "org.assertj:assertj-core:3.27.3"
awaitility = "org.awaitility:awaitility:4.3.0"
findbugs-jsr305 = "com.google.code.findbugs:jsr305:3.0.2"
wiremockjre8 = "com.github.tomakehurst:wiremock-jre8:2.35.2"
wiremock = "org.wiremock:wiremock:3.13.0"
testcontainers = "org.testcontainers:testcontainers:1.21.0"
logback = "ch.qos.logback:logback-classic:1.5.18"
jackson = "com.fasterxml.jackson.core:jackson-databind:2.19.0"
protobuf-util = "com.google.protobuf:protobuf-java-util:3.25.7"
# last version supporting Java 8
mockito = "org.mockito:mockito-core:4.11.0"
mockserver-client = "org.mock-server:mockserver-client-java:5.15.0"

junitBom = { group = "org.junit", name = "junit-bom", version.ref = "junit" }

okhttp = "com.squareup.okhttp3:okhttp:4.12.0"

hdrhistogram = "org.hdrhistogram:HdrHistogram:2.2.2"
lmax-disruptor = "com.lmax:disruptor:3.4.4"
jctools = "org.jctools:jctools-core:4.0.5"
github-api = "org.kohsuke:github-api:1.327"
apachecommons-compress = "org.apache.commons:commons-compress:1.27.1"

freemarker = "org.freemarker:freemarker:2.3.34"

spotlessPlugin = { group = "com.diffplug.spotless", name = "spotless-plugin-gradle", version.ref = "spotless" }
shadowPlugin = { group = "com.gradleup.shadow", name = "shadow-gradle-plugin", version.ref = "shadow" }
licenseReportPlugin = "com.github.jk1.dependency-license-report:com.github.jk1.dependency-license-report.gradle.plugin:2.9"
muzzleCheckPlugin = { group = "io.opentelemetry.instrumentation.muzzle-check", name = "io.opentelemetry.instrumentation.muzzle-check.gradle.plugin", version.ref = "opentelemetryJavaagentAlpha" }
muzzleGenerationPlugin = { group = "io.opentelemetry.instrumentation.muzzle-generation", name = "io.opentelemetry.instrumentation.muzzle-generation.gradle.plugin", version.ref = "opentelemetryJavaagentAlpha" }
# Ant should be kept in sync with the version used in the shadow plugin
ant = "org.apache.ant:ant:1.10.15"
# ASM is currently only used during compile-time, so it is okay to diverge from the version used in ByteBuddy
asm = "org.ow2.asm:asm:9.8"

slf4j-api = "org.slf4j:slf4j-api:2.0.17"
log4j2-slf4j = { group= "org.apache.logging.log4j", name="log4j-slf4j2-impl", version.ref="log4j2"}
log4j2-core = { group= "org.apache.logging.log4j", name="log4j-core", version.ref="log4j2"}

# Instrumented libraries
openaiClient = "com.openai:openai-java:1.6.1"

[bundles]

semconv = ["opentelemetrySemconv", "opentelemetrySemconvIncubating"]
log4j2 = ["log4j2-core", "log4j2-slf4j"]


[plugins]

jib = { id = "com.google.cloud.tools.jib", version.ref = "jib" }
taskinfo = { id = "org.barfuin.gradle.taskinfo", version = '2.2.0' }
jmh = { id = "me.champeau.jmh", version = "0.7.3" }
nexusPublish = { id = "io.github.gradle-nexus.publish-plugin", version = '2.0.0' }
dockerJavaApplication = { id = "com.bmuschko.docker-java-application", version = "9.4.0" }
muzzleCheck = { id = "io.opentelemetry.instrumentation.muzzle-check", version.ref = "opentelemetryJavaagentAlpha" }
muzzleGeneration = { id = "io.opentelemetry.instrumentation.muzzle-generation", version.ref = "opentelemetryJavaagentAlpha" }

