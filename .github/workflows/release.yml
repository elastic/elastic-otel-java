---

name: Release

on:
  workflow_dispatch:
    inputs:
      ref:
          description: 'Branch or tag ref to run the workflow on'
          required: true
          default: "main"
      version:
        description: 'The version to release (e.g. 1.2.3). This workflow will automatically perform the required version bumps'
        required: true
      dry_run:
        description: If set, run a dry-run release
        default: false
        type: boolean
      skip_maven_deploy:
        description: |
          If enabled, the deployment to maven central will be skipped.
          Select this if the deployment job for this release failed in a previous version but the release was actually published.
          Check manually on maven central beforehand!
        type: boolean
        required: true
        default: false

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}
  
env:
  RELEASE_VERSION: ${{ inputs.version }}
  RELEASE_VERSION_TAG: v${{ inputs.version }}
  
jobs:
  validate-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0
      - name: Warmup gradle wrapper
        uses: ./.github/workflows/gradle-goal
        with:
          command: "./gradlew -q currentVersion"
      - name: Validate release tag does not exist in repo
        uses: ./.github/workflows/validate-tag
        with:
          tag: ${{ env.RELEASE_VERSION_TAG }}
      - name: Validate tag match current version
        run: |
          if [ "$(./gradlew -q currentVersion)" != "${{ env.RELEASE_VERSION }}" ]; then
            echo "Tag should match version set in 'version.properties'"
            exit 1
          fi
      - name: Validate version is a release version
        run: |
          if [[ "$(./gradlew -q currentVersion)" =~ "-SNAPSHOT" ]]; then
            echo "This is a snapshot version"
            exit 1
          fi

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ ! inputs.skip_maven_deploy }}
    needs:
      - validate-tag
    permissions:
      attestations: write
      contents: write
      id-token: write
    env:
      TARBALL_FILE: artifacts.tar
    steps:
      - id: buildkite
        name: Run Release
        uses: elastic/apm-pipeline-library/.github/actions/buildkite@current
        with:
          vaultUrl: ${{ secrets.VAULT_ADDR }}
          vaultRoleId: ${{ secrets.VAULT_ROLE_ID }}
          vaultSecretId: ${{ secrets.VAULT_SECRET_ID }}
          pipeline: elastic-otel-java-release
          waitFor: true
          printBuildLogs: false
          artifactName: releases
          artifactPath: ${{ env.TARBALL_FILE }}
          buildEnvVars: |
            ref=${{ inputs.ref }}
            dry_run=${{ inputs.dry_run || 'false' }}
            TARBALL_FILE=${{ env.TARBALL_FILE }}

      - uses: actions/download-artifact@v3
        with:
          name: releases

      - name: untar the buildkite tarball
        run: tar xvf ${{ env.TARBALL_FILE }}

      - name: generate build provenance
        uses: actions/attest-build-provenance@173725a1209d09b31f9d30a3890cf2757ebbff0d  # v1.1.2
        with:
          subject-path: "${{ github.workspace }}/**/*.jar"

      - if: ${{ success() && ! inputs.dry_run }}
        uses: elastic/apm-pipeline-library/.github/actions/slack-message@current
        with:
          url: ${{ secrets.VAULT_ADDR }}
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          channel: "#apm-agent-java"
          message: |
            :runner: [${{ github.repository }}] Release *${{ github.ref_name }}* has been triggered in Buildkite: (<${{ steps.buildkite.outputs.build }}|build>)

      - if: ${{ failure() && ! inputs.dry_run }}
        uses: elastic/apm-pipeline-library/.github/actions/slack-message@current
        with:
          url: ${{ secrets.VAULT_ADDR }}
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          channel: "#apm-agent-java"
          message: |
            :ghost: [${{ github.repository }}] Release *${{ github.ref_name }}* didn't get triggered in Buildkite.
            Build: (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|here>)

  await-maven-central-artifact:
    runs-on: ubuntu-latest
    name: Wait for release to be available on maven-central
    if: inputs.dry_run == false
    needs:
      - validate-tag
    steps:
      - uses: elastic/apm-pipeline-library/.github/actions/await-maven-artifact@current
        with:
          groupid: 'co.elastic.otel'
          artifactid: 'elastic-otel-javaagent'
          version: ${{ inputs.version }}

  post-release:
    name: "Bump versions and create PR"
    needs:
      - await-maven-central-artifact
    uses: ./.github/workflows/pre-post-release.yml
    permissions:
      contents: write
    if: inputs.dry_run == false
    with:
      ref: ${{ inputs.ref }}
      version: ${{ inputs.version }}
      phase: 'post'
    secrets: inherit

  create-github-release:
    name: "Create GitHub Release"
    needs:
      - post-release
    runs-on: ubuntu-latest
    if: ${{ ! inputs.dry_run }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ env.RELEASE_VERSION_TAG }} \
            --verify-tag \
            --title="Release ${{ env.RELEASE_VERSION }}" \
            --notes=""
